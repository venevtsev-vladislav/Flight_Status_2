#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Amplitude
"""

import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def check_amplitude_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Amplitude"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Amplitude")
    print("=" * 40)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = {
        'AMPLITUDE_API_KEY': os.getenv('AMPLITUDE_API_KEY'),
        'AMPLITUDE_SECRET_KEY': os.getenv('AMPLITUDE_SECRET_KEY'),
        'AMPLITUDE_PROJECT_ID': os.getenv('AMPLITUDE_PROJECT_ID')
    }
    
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    
    all_good = True
    for var_name, var_value in required_vars.items():
        if var_value:
            print(f"   ‚úÖ {var_name}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print(f"   ‚ùå {var_name}: –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            all_good = False
    
    if not all_good:
        print("\nüö® –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π:")
        print("   1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env")
        print("   2. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–ª—é—á–∏ Amplitude")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        return False
    
    print("\n‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        from bot.config import ANALYTICS
        
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        
        if ANALYTICS.get('enabled'):
            print("   ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞")
        else:
            print("   ‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return False
        
        amplitude_config = ANALYTICS.get('amplitude', {})
        
        if amplitude_config.get('enabled'):
            print("   ‚úÖ Amplitude –≤–∫–ª—é—á–µ–Ω")
        else:
            print("   ‚ùå Amplitude –æ—Ç–∫–ª—é—á–µ–Ω")
            return False
        
        print(f"   üìä Batch size: {amplitude_config.get('batch_size', 'N/A')}")
        print(f"   ‚è±Ô∏è  Flush interval: {amplitude_config.get('flush_interval', 'N/A')} —Å–µ–∫")
        
    except ImportError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É:")
    try:
        import httpx
        import asyncio
        
        async def test_connection():
            try:
                async with httpx.AsyncClient(timeout=10) as client:
                    response = await client.get("https://api2.amplitude.com")
                    if response.status_code == 200:
                        print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Amplitude API –¥–æ—Å—Ç—É–ø–Ω–æ")
                        return True
                    else:
                        print(f"   ‚ö†Ô∏è  Amplitude API –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º: {response.status_code}")
                        return False
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Amplitude: {e}")
                return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        result = asyncio.run(test_connection())
        
        if not result:
            print("\nüö® –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º:")
            print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            return False
            
    except ImportError:
        print("   ‚ö†Ô∏è  httpx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    
    print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python test_amplitude.py")
    print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–±—ã—Ç–∏—è –≤ Amplitude")
    print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python run.py")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = check_amplitude_status()
    
    if success:
        print("\n‚úÖ Amplitude –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("\n‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Amplitude")
        print("–°–º. AMPLITUDE_SETUP_GUIDE.md –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")

if __name__ == "__main__":
    main() 