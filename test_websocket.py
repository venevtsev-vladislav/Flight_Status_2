#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±—Å–æ–∫–µ—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç AeroDataBox API
SAMPLE_NOTIFICATION_DATA = {
    "subscription": {
        "id": "12345678-1234-1234-1234-123456789012",
        "isActive": True,
        "createdOnUtc": "2025-07-20T10:00:00Z",
        "subject": {
            "type": "FlightByNumber",
            "id": "QR1197"
        },
        "subscriber": {
            "type": "Webhook",
            "id": "https://your-webhook-url.com/flight-updates"
        }
    },
    "flights": [
        {
            "number": "QR 1197",
            "status": "EnRoute",
            "lastUpdatedUtc": "2025-07-20T10:30:00Z",
            "notificationSummary": "Flight QR1197 is now en route",
            "notificationRemark": "Flight departed on time",
            "departure": {
                "airport": {
                    "icao": "OEGS",
                    "iata": "ELQ",
                    "name": "Gassim Regional Airport"
                },
                "scheduledTime": {
                    "utc": "2025-07-20T08:10Z",
                    "local": "2025-07-20T11:10+03:00"
                },
                "actualTime": {
                    "utc": "2025-07-20T08:15Z",
                    "local": "2025-07-20T11:15+03:00"
                },
                "terminal": "T1",
                "gate": "A5"
            },
            "arrival": {
                "airport": {
                    "icao": "OTHH",
                    "iata": "DOH",
                    "name": "Doha Hamad International Airport"
                },
                "scheduledTime": {
                    "utc": "2025-07-20T09:55Z",
                    "local": "2025-07-20T12:55+03:00"
                },
                "actualTime": None,
                "terminal": None,
                "gate": None
            },
            "aircraft": {
                "model": "Airbus A320",
                "registration": "A7-ABC"
            },
            "airline": {
                "name": "Qatar Airways",
                "iata": "QR",
                "icao": "QTR"
            },
            "location": {
                "lat": 27.5,
                "lon": 48.2,
                "altitude": 35000,
                "speed": 850,
                "track": 45
            }
        }
    ]
}

def format_notification_message(notification_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    
    flight = notification_data["flights"][0]
    subscription = notification_data["subscription"]
    
    # –°—Ç–∞—Ç—É—Å—ã —Ä–µ–π—Å–æ–≤
    status_emoji = {
        "Unknown": "‚ùì",
        "Expected": "‚è≥",
        "EnRoute": "‚úàÔ∏è",
        "CheckIn": "üìã",
        "Boarding": "üö™",
        "GateClosed": "üîí",
        "Departed": "üõ´",
        "Delayed": "‚è∞",
        "Approaching": "üõ¨",
        "Arrived": "‚úÖ",
        "Canceled": "‚ùå",
        "Diverted": "üîÑ",
        "CanceledUncertain": "‚ùì"
    }
    
    status = flight["status"]
    status_icon = status_emoji.get(status, "‚ùì")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üîî **Flight Update: {flight['number']}**\n\n"
    message += f"{status_icon} **Status:** {status}\n"
    
    if flight.get("notificationSummary"):
        message += f"üìù **Update:** {flight['notificationSummary']}\n"
    
    if flight.get("notificationRemark"):
        message += f"üí¨ **Note:** {flight['notificationRemark']}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ª–µ—Ç–µ
    dep = flight["departure"]
    message += f"\nüõ´ **Departure:** {dep['airport']['iata']} ({dep['airport']['name']})\n"
    message += f"üìÖ **Scheduled:** {dep['scheduledTime']['local']}\n"
    
    if dep.get("actualTime"):
        message += f"‚úÖ **Actual:** {dep['actualTime']['local']}\n"
    
    if dep.get("gate"):
        message += f"üö™ **Gate:** {dep['gate']}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–µ—Ç–µ
    arr = flight["arrival"]
    message += f"\nüõ¨ **Arrival:** {arr['airport']['iata']} ({arr['airport']['name']})\n"
    message += f"üìÖ **Scheduled:** {arr['scheduledTime']['local']}\n"
    
    if arr.get("actualTime"):
        message += f"‚úÖ **Actual:** {arr['actualTime']['local']}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–º–æ–ª–µ—Ç–µ
    if flight.get("aircraft"):
        message += f"\n‚úàÔ∏è **Aircraft:** {flight['aircraft']['model']}\n"
        if flight['aircraft'].get("registration"):
            message += f"üÜî **Registration:** {flight['aircraft']['registration']}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏
    if flight.get("airline"):
        message += f"üè¢ **Airline:** {flight['airline']['name']}\n"
    
    # –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    if flight.get("location"):
        loc = flight["location"]
        message += f"\nüìç **Location:** {loc['lat']:.2f}, {loc['lon']:.2f}\n"
        message += f"üìä **Altitude:** {loc['altitude']:,} ft\n"
        message += f"‚ö° **Speed:** {loc['speed']} km/h\n"
    
    message += f"\nüïê **Last Updated:** {flight['lastUpdatedUtc']}"
    
    return message

def test_notification_formatting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    logger.info("üß™ Testing notification formatting...")
    
    formatted_message = format_notification_message(SAMPLE_NOTIFICATION_DATA)
    
    print("\n" + "="*50)
    print("üì± SAMPLE TELEGRAM NOTIFICATION")
    print("="*50)
    print(formatted_message)
    print("="*50)
    
    return formatted_message

def test_different_statuses():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Ä–µ–π—Å–æ–≤"""
    logger.info("üß™ Testing different flight statuses...")
    
    statuses = [
        "Expected", "EnRoute", "CheckIn", "Boarding", 
        "Departed", "Delayed", "Approaching", "Arrived", "Canceled"
    ]
    
    for status in statuses:
        test_data = SAMPLE_NOTIFICATION_DATA.copy()
        test_data["flights"][0]["status"] = status
        test_data["flights"][0]["notificationSummary"] = f"Flight status changed to {status}"
        
        formatted = format_notification_message(test_data)
        print(f"\n--- Status: {status} ---")
        print(formatted[:200] + "..." if len(formatted) > 200 else formatted)

def test_websocket_data_structure():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Å–æ–∫–µ—Ç–∞"""
    logger.info("üß™ Testing websocket data structure...")
    
    print("\n" + "="*50)
    print("üîå WEBSOCKET DATA STRUCTURE")
    print("="*50)
    print(json.dumps(SAMPLE_NOTIFICATION_DATA, indent=2))
    print("="*50)

async def simulate_websocket_receiver():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–µ–±—Å–æ–∫–µ—Ç—É"""
    logger.info("üß™ Simulating websocket receiver...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    print("\nüîÑ Simulating websocket notification...")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    formatted_message = format_notification_message(SAMPLE_NOTIFICATION_DATA)
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    print("üì§ Would send to Telegram:")
    print(formatted_message)
    
    return formatted_message

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ Starting websocket notification tests...")
    
    # –¢–µ—Å—Ç 1: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    test_notification_formatting()
    
    # –¢–µ—Å—Ç 2: –†–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    test_different_statuses()
    
    # –¢–µ—Å—Ç 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    test_websocket_data_structure()
    
    # –¢–µ—Å—Ç 4: –°–∏–º—É–ª—è—Ü–∏—è –≤–µ–±—Å–æ–∫–µ—Ç–∞
    asyncio.run(simulate_websocket_receiver())
    
    logger.info("‚úÖ All tests completed!")

if __name__ == "__main__":
    main() 