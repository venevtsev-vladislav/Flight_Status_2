#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–π—Å–∞—Ö
"""

import logging
from typing import Dict, Any, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–π—Å–∞—Ö"""
    
    def __init__(self):
        # –°—Ç–∞—Ç—É—Å—ã —Ä–µ–π—Å–æ–≤ —Å —ç–º–æ–¥–∑–∏
        self.status_emoji = {
            "Unknown": "‚ùì",
            "Expected": "‚è≥",
            "EnRoute": "‚úàÔ∏è",
            "CheckIn": "üìã",
            "Boarding": "üõÇ",
            "GateClosed": "üîí",
            "Departed": "‚úàÔ∏è",
            "Delayed": "‚è∞",
            "Approaching": "üõ¨",
            "Arrived": "‚úÖ",
            "Canceled": "‚ùå",
            "Diverted": "üîÑ",
            "CanceledUncertain": "‚ùì"
        }
    
    def format_flight_notification(self, flight_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–π—Å–µ –≤ –∫–æ—Ä–æ—Ç–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        
        flight_number = flight_data.get("number", "").replace(" ", "")
        status = flight_data.get("status", "Unknown")
        emoji = self.status_emoji.get(status, "‚ùì")
        
        # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"{flight_number}: "
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if status == "Boarding":
            gate = flight_data.get("departure", {}).get("gate")
            if gate:
                message += f"–ò–¥–µ—Ç –ø–æ—Å–∞–¥–∫–∞, –≤—ã—Ö–æ–¥ {gate} {emoji}"
            else:
                message += f"–ò–¥–µ—Ç –ø–æ—Å–∞–¥–∫–∞ {emoji}"
                
        elif status == "Departed":
            actual_time = flight_data.get("departure", {}).get("actualTime", {}).get("local")
            if actual_time:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è (HH:MM)
                time_str = actual_time.split("T")[1][:5] if "T" in actual_time else actual_time[:5]
                message += f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {time_str} {emoji}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
                arrival_time = flight_data.get("arrival", {}).get("scheduledTime", {}).get("local")
                if arrival_time:
                    arrival_str = arrival_time.split("T")[1][:5] if "T" in arrival_time else arrival_time[:5]
                    message += f"\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è {arrival_str}"
                    
        elif status == "Arrived":
            actual_time = flight_data.get("arrival", {}).get("actualTime", {}).get("local")
            if actual_time:
                time_str = actual_time.split("T")[1][:5] if "T" in actual_time else actual_time[:5]
                message += f"–ü—Ä–∏–±—ã–ª –≤ {time_str} {emoji}"
            else:
                message += f"–ü—Ä–∏–±—ã–ª {emoji}"
                
        elif status == "Delayed":
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–µ—Ä–∂–∫–µ
            notification_summary = flight_data.get("notificationSummary", "")
            if "delay" in notification_summary.lower() or "–∑–∞–¥–µ—Ä–∂–∫–∞" in notification_summary.lower():
                message += f"–ó–∞–¥–µ—Ä–∂–∫–∞ {emoji}"
            else:
                message += f"–ó–∞–¥–µ—Ä–∂–∫–∞ {emoji}"
                
        elif status == "Canceled":
            message += f"–û—Ç–º–µ–Ω–µ–Ω {emoji}"
            
        elif status == "EnRoute":
            message += f"–í –ø—É—Ç–∏ {emoji}"
            
        elif status == "CheckIn":
            message += f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ {emoji}"
            
        elif status == "GateClosed":
            message += f"–í—ã—Ö–æ–¥ –∑–∞–∫—Ä—ã—Ç {emoji}"
            
        elif status == "Approaching":
            message += f"–ó–∞—Ö–æ–¥–∏—Ç –Ω–∞ –ø–æ—Å–∞–¥–∫—É {emoji}"
            
        else:
            # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º notificationSummary
            notification_summary = flight_data.get("notificationSummary", "")
            if notification_summary:
                message += f"{notification_summary} {emoji}"
            else:
                message += f"–°—Ç–∞—Ç—É—Å: {status} {emoji}"
        
        return message
    
    def format_notification_with_details(self, flight_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏"""
        
        base_message = self.format_flight_notification(flight_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        details = []
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–µ—Ä–∂–∫–µ
        if flight_data.get("status") == "Delayed":
            departure = flight_data.get("departure", {})
            scheduled = departure.get("scheduledTime", {}).get("local")
            actual = departure.get("actualTime", {}).get("local")
            
            if scheduled and actual:
                # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                try:
                    scheduled_time = datetime.fromisoformat(scheduled.replace("Z", "+00:00"))
                    actual_time = datetime.fromisoformat(actual.replace("Z", "+00:00"))
                    delay_minutes = int((actual_time - scheduled_time).total_seconds() / 60)
                    
                    if delay_minutes > 0:
                        details.append(f"–ó–∞–¥–µ—Ä–∂–∫–∞ {delay_minutes} –º–∏–Ω—É—Ç")
                except:
                    pass
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ–π—Ç–µ
        gate = flight_data.get("departure", {}).get("gate")
        if gate and flight_data.get("status") in ["Boarding", "Departed"]:
            details.append(f"–í—ã—Ö–æ–¥ {gate}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
        terminal = flight_data.get("departure", {}).get("terminal")
        if terminal:
            details.append(f"–¢–µ—Ä–º–∏–Ω–∞–ª {terminal}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        if details:
            base_message += f"\n{', '.join(details)}"
        
        return base_message

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    service = NotificationService()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_flight = {
        "number": "QR 818",
        "status": "Boarding",
        "departure": {
            "gate": "D7",
            "terminal": "T1"
        },
        "arrival": {
            "scheduledTime": {"local": "2025-07-20T14:43+03:00"}
        }
    }
    
    print(service.format_flight_notification(test_flight)) 